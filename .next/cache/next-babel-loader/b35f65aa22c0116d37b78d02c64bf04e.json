{"ast":null,"code":"var _jsxFileName = \"/Users/hcls/Hevolsoft/meme-generator/src/pages/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useContext, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport Head from 'next/head';\nimport { Container, Title, Description, Input, Label, DivInput, Canvas, DivCanvas, DragActive, DragActiveTitle, ButtonFont, ButtonColorRed, ButtonColorWhite, ButtonColorBlack } from '../styles/pages/Home';\nimport { Context } from '../context/Context';\n\nconst Home = () => {\n  const {\n    canvasRef,\n    lowerText,\n    setLowerText,\n    setUpperText,\n    upperText,\n    onDrop,\n    images,\n    setColor,\n    setFont\n  } = useContext(Context);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    accept: ['image/*']\n  });\n  const {\n    0: name\n  } = useState({\n    title: 'Meme Generator',\n    description: 'Meme Generator or editing.'\n  });\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"Meme Generator\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  })), __jsx(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, name.title), __jsx(Description, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, name.description), __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, __jsx(DivCanvas, _extends({}, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), isDragActive ? __jsx(DragActive, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, __jsx(DragActiveTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, \"Solte a imagem para fazer upload\")) : __jsx(Canvas, {\n    ref: canvasRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \" Fa\\xE7a upload da imagem\"), __jsx(\"input\", _extends({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }))), __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(DivInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, __jsx(Label, {\n    htmlFor: \"upperText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, \"Title\"), __jsx(Input, {\n    value: upperText,\n    onChange: e => setUpperText(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  })), __jsx(DivInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, __jsx(Label, {\n    htmlFor: \"lowerText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"Description\"), __jsx(Input, {\n    value: lowerText,\n    onChange: e => setLowerText(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  })), __jsx(DivInput, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, __jsx(Label, {\n    htmlFor: \"upperText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"Filters\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, __jsx(ButtonFont, {\n    onClick: () => setFont('Roboto'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, \"Roboto\"), __jsx(ButtonFont, {\n    onCLick: () => setFont('Zen Dots'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, \"Zen Dots\"), __jsx(ButtonFont, {\n    onCLick: () => setFont('Karantina'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, \"Karantina\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, __jsx(ButtonColorRed, {\n    onClick: () => setColor('red'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }), __jsx(ButtonColorWhite, {\n    onCLick: () => setColor('white'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }), __jsx(ButtonColorBlack, {\n    onCLick: () => setColor('black'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/hcls/Hevolsoft/meme-generator/src/pages/index.tsx"],"names":["React","useContext","useState","useDropzone","Head","Container","Title","Description","Input","Label","DivInput","Canvas","DivCanvas","DragActive","DragActiveTitle","ButtonFont","ButtonColorRed","ButtonColorWhite","ButtonColorBlack","Context","Home","canvasRef","lowerText","setLowerText","setUpperText","upperText","onDrop","images","setColor","setFont","getRootProps","getInputProps","isDragActive","accept","name","title","description","e","target","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SACEC,SADF,EAEEC,KAFF,EAGEC,WAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,QANF,EAOEC,MAPF,EAQEC,SARF,EASEC,UATF,EAUEC,eAVF,EAWEC,UAXF,EAYEC,cAZF,EAaEC,gBAbF,EAcEC,gBAdF,QAeO,sBAfP;AAgBA,SAASC,OAAT,QAAwB,oBAAxB;;AAEA,MAAMC,IAAc,GAAG,MAAM;AAC3B,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,MAPI;AAQJC,IAAAA,QARI;AASJC,IAAAA;AATI,MAUF5B,UAAU,CAACkB,OAAD,CAVd;AAWA,QAAM;AAAEW,IAAAA,YAAF;AAAgBC,IAAAA,aAAhB;AAA+BC,IAAAA;AAA/B,MAAgD7B,WAAW,CAAC;AAAEuB,IAAAA,MAAF;AAAUO,IAAAA,MAAM,EAAE,CAAC,SAAD;AAAlB,GAAD,CAAjE;AACA,QAAM;AAAA,OAACC;AAAD,MAAShC,QAAQ,CAAC;AACtBiC,IAAAA,KAAK,EAAE,gBADe;AAEtBC,IAAAA,WAAW,EAAE;AAFS,GAAD,CAAvB;AAMA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAM,IAAA,GAAG,EAAC,MAAV;AAAiB,IAAA,IAAI,EAAC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQF,IAAI,CAACC,KAAb,CALF,EAME,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcD,IAAI,CAACE,WAAnB,CANF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eACMN,YAAY,EADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGGE,YAAY,GACX,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,CADW,GAOX,MAAC,MAAD;AAAQ,IAAA,GAAG,EAAEX,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAVJ,EAaE,4BAAWU,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAbF,CADF,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE,MAAC,KAAD;AACE,IAAA,KAAK,EAAEN,SADT;AAEE,IAAA,QAAQ,EAAGY,CAAD,IAAOb,YAAY,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV,CAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,EASE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,MAAC,KAAD;AACE,IAAA,KAAK,EAAEjB,SADT;AAEE,IAAA,QAAQ,EAAGe,CAAD,IAAOd,YAAY,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV,CAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CATF,EAgBE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAE,MAAMV,OAAO,CAAC,QAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAE,MAAMA,OAAO,CAAC,UAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAE,MAAMA,OAAO,CAAC,WAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHF,CAFF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAgB,IAAA,OAAO,EAAE,MAAMD,QAAQ,CAAC,KAAD,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE,MAAMA,QAAQ,CAAC,OAAD,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE,MAAMA,QAAQ,CAAC,OAAD,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAPF,CAhBF,CAlBF,CARF,CADF;AA8DD,CAjFD;;AAmFA,eAAeR,IAAf","sourcesContent":["import React, { useContext, useState } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport Head from 'next/head'\n\nimport {\n  Container,\n  Title,\n  Description,\n  Input,\n  Label,\n  DivInput,\n  Canvas,\n  DivCanvas,\n  DragActive,\n  DragActiveTitle,\n  ButtonFont,\n  ButtonColorRed,\n  ButtonColorWhite,\n  ButtonColorBlack\n} from '../styles/pages/Home'\nimport { Context } from '../context/Context'\n\nconst Home: React.FC = () => {\n  const {\n    canvasRef,\n    lowerText,\n    setLowerText,\n    setUpperText,\n    upperText,\n    onDrop,\n    images,\n    setColor,\n    setFont,\n  } = useContext(Context)\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop, accept: ['image/*'] })\n  const [name] = useState({\n    title: 'Meme Generator',\n    description: 'Meme Generator or editing.'\n  })\n\n\n  return (\n    <Container>\n      <Head>\n        <title>Meme Generator</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <Title>{name.title}</Title>\n      <Description>{name.description}</Description>\n\n      <main>\n        <DivCanvas\n          {...getRootProps()}\n        >\n          {isDragActive ? (\n            <DragActive>\n              <DragActiveTitle>\n                Solte a imagem para fazer upload\n              </DragActiveTitle>\n            </DragActive>\n          ) : (\n            <Canvas ref={canvasRef}> Faça upload da imagem</Canvas>\n          )}\n\n          <input {...getInputProps()} />\n\n        </DivCanvas>\n\n        <form>\n\n          <DivInput>\n            <Label htmlFor=\"upperText\">Title</Label>\n            <Input\n              value={upperText}\n              onChange={(e) => setUpperText(e.target.value)}\n            />\n          </DivInput>\n          <DivInput>\n            <Label htmlFor=\"lowerText\">Description</Label>\n            <Input\n              value={lowerText}\n              onChange={(e) => setLowerText(e.target.value)}\n            />\n          </DivInput>\n          <DivInput>\n            <Label htmlFor=\"upperText\">Filters</Label>\n            <div>\n              <ButtonFont onClick={() => setFont('Roboto')}>Roboto</ButtonFont>\n              <ButtonFont onCLick={() => setFont('Zen Dots')}>Zen Dots</ButtonFont>\n              <ButtonFont onCLick={() => setFont('Karantina')}>Karantina</ButtonFont>\n            </div>\n            <div>\n              <ButtonColorRed onClick={() => setColor('red')} />\n              <ButtonColorWhite onCLick={() => setColor('white')} />\n              <ButtonColorBlack onCLick={() => setColor('black')} />\n            </div>\n\n          </DivInput>\n        </form>\n      </main>\n\n    </Container>\n  )\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}