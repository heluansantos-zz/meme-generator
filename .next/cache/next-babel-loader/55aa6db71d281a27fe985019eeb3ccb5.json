{"ast":null,"code":"var _jsxFileName = \"/Users/hcls/Hevolsoft/meme-generator/src/context/Context.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useRef, useState } from \"react\";\nexport const Context = createContext({});\nexport const ContextProvider = ({\n  children\n}) => {\n  const canvasRef = useRef(null);\n  const {\n    0: upperText,\n    1: setUpperText\n  } = useState(\"\");\n  const {\n    0: lowerText,\n    1: setLowerText\n  } = useState(\"\");\n  const {\n    0: image,\n    1: setImage\n  } = useState([]);\n\n  const onDrop = selectedFiles => {\n    if (selectedFiles && selectedFiles.length) {\n      selectedFiles.map(File => {\n        const reader = new FileReader();\n\n        reader.onload = () => {};\n\n        reader.readAsDataURL();\n      });\n    }\n  };\n\n  return __jsx(Context.Provider, {\n    value: {\n      canvasRef,\n      upperText,\n      lowerText,\n      setUpperText,\n      setLowerText,\n      onDrop\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/hcls/Hevolsoft/meme-generator/src/context/Context.tsx"],"names":["createContext","useRef","useState","Context","ContextProvider","children","canvasRef","upperText","setUpperText","lowerText","setLowerText","image","setImage","onDrop","selectedFiles","length","map","File","reader","FileReader","onload","readAsDataURL"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,MAAxB,EAAgCC,QAAhC,QAAgD,OAAhD;AAGA,OAAO,MAAMC,OAAO,GAAGH,aAAa,CAAC,EAAD,CAA7B;AAEP,OAAO,MAAMI,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwC;AACnE,QAAMC,SAAS,GAAGL,MAAM,CAAoB,IAApB,CAAxB;AACA,QAAM;AAAA,OAACM,SAAD;AAAA,OAAYC;AAAZ,MAA4BN,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACO,SAAD;AAAA,OAAYC;AAAZ,MAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACS,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAAW,EAAX,CAAlC;;AAEA,QAAMW,MAAM,GAAIC,aAAD,IAA2B;AACtC,QAAIA,aAAa,IAAIA,aAAa,CAACC,MAAnC,EAA2C;AACvCD,MAAAA,aAAa,CAACE,GAAd,CAAmBC,IAAD,IAAU;AACxB,cAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,QAAAA,MAAM,CAACE,MAAP,GAAgB,MAAM,CAErB,CAFD;;AAGAF,QAAAA,MAAM,CAACG,aAAP;AACH,OAND;AAOH;AACJ,GAVD;;AAYA,SACI,MAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AACrBf,MAAAA,SADqB;AAErBC,MAAAA,SAFqB;AAGrBE,MAAAA,SAHqB;AAIrBD,MAAAA,YAJqB;AAKrBE,MAAAA,YALqB;AAMrBG,MAAAA;AANqB,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASQR,QATR,CADJ;AAcH,CAhCM","sourcesContent":["import { createContext, useRef, useState } from \"react\";\nimport { ContextData, ContextProviderProps } from './interfaces'\n\nexport const Context = createContext({} as ContextData);\n\nexport const ContextProvider = ({ children }: ContextProviderProps) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const [upperText, setUpperText] = useState(\"\");\n    const [lowerText, setLowerText] = useState(\"\");\n    const [image, setImage] = useState<string[]>([]);\n\n    const onDrop = (selectedFiles: File[]) => {\n        if (selectedFiles && selectedFiles.length) {\n            selectedFiles.map((File) => {\n                const reader = new FileReader();\n                reader.onload = () => {\n\n                }\n                reader.readAsDataURL();\n            })\n        }\n    }\n\n    return (\n        <Context.Provider value={{\n            canvasRef,\n            upperText,\n            lowerText,\n            setUpperText,\n            setLowerText,\n            onDrop,\n        }}>\n            {\n                children\n            }\n        </Context.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}