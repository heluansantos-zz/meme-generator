{"ast":null,"code":"var _jsxFileName = \"/Users/hcls/Hevolsoft/meme-generator/src/context/Context.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useEffect, useRef, useState } from \"react\";\nexport const Context = createContext({});\nexport const ContextProvider = ({\n  children\n}) => {\n  const canvasRef = useRef(null);\n  const {\n    0: upperText,\n    1: setUpperText\n  } = useState(\"\");\n  const {\n    0: lowerText,\n    1: setLowerText\n  } = useState(\"\");\n  const {\n    0: images,\n    1: setImages\n  } = useState([]);\n  const {\n    0: color,\n    1: setColor\n  } = useState('white');\n  const {\n    0: font,\n    1: setFont\n  } = useState('Impact'); // Roboto, Zen Dots, Karantina\n\n  useEffect(() => {\n    if (images && images.length > 0) {\n      const image = new Image();\n\n      image.onload = () => {\n        const canvas = canvasRef.current;\n        canvas.width = 500;\n        canvas.height = 500;\n        const contexto = canvas.getContext('2d');\n        contexto.drawImage(image, 0, 0, 500, 500);\n        contexto.fillText(upperText, 50, 60);\n        contexto.font = `25pt ${font}`;\n        contexto.fillStyle = `${color}`;\n        contexto.strokeStyle = \"black\";\n        contexto.strokeText(upperText, 50, 60);\n        contexto.fillText(upperText, 50, 60);\n        contexto.strokeText(lowerText, 50, 440);\n        contexto.fillText(lowerText, 50, 440);\n        contexto.lineWidth = 2;\n      };\n\n      image.src = images[0];\n      console.log(image.nodeValue);\n    }\n  }, [images, upperText, lowerText, color, font]);\n\n  const seletcFont = selectedFont => {\n    setFont(selectedFont);\n  };\n\n  const saveMeme = () => {\n    if (images && images.length > 0) {\n      const image = new Image();\n\n      image.onload = () => {\n        const canvas = canvasRef.current;\n        canvas.width = 500;\n        canvas.height = 500;\n        const contexto = canvas.getContext('2d');\n        contexto.drawImage(image, 0, 0, 500, 500);\n        contexto.fillText(upperText, 50, 60);\n        contexto.font = `25pt ${font}`;\n        contexto.fillStyle = `${color}`;\n        contexto.strokeStyle = \"black\";\n        contexto.strokeText(upperText, 50, 60);\n        contexto.fillText(upperText, 50, 60);\n        contexto.strokeText(lowerText, 50, 440);\n        contexto.fillText(lowerText, 50, 440);\n        contexto.lineWidth = 2;\n      };\n\n      const a = document.createElement('a');\n      a.href = `${image.src}.png`;\n      a.download = 'meme';\n      document.body.appendChild(a);\n      a.click();\n    }\n  };\n\n  const seletcColor = selectedColor => {\n    setColor(selectedColor);\n  };\n\n  const onDrop = selectedFiles => {\n    if (selectedFiles && selectedFiles.length) {\n      selectedFiles.map(file => {\n        const reader = new FileReader();\n\n        reader.onload = e => {\n          const uploadImages = [String(e.target.result), ...images];\n          setImages(uploadImages);\n        };\n\n        reader.readAsDataURL(file);\n      });\n    }\n  };\n\n  return __jsx(Context.Provider, {\n    value: {\n      canvasRef,\n      upperText,\n      lowerText,\n      setUpperText,\n      setLowerText,\n      onDrop,\n      images,\n      seletcFont,\n      seletcColor,\n      saveMeme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/hcls/Hevolsoft/meme-generator/src/context/Context.tsx"],"names":["createContext","useEffect","useRef","useState","Context","ContextProvider","children","canvasRef","upperText","setUpperText","lowerText","setLowerText","images","setImages","color","setColor","font","setFont","length","image","Image","onload","canvas","current","width","height","contexto","getContext","drawImage","fillText","fillStyle","strokeStyle","strokeText","lineWidth","src","console","log","nodeValue","seletcFont","selectedFont","saveMeme","a","document","createElement","href","download","body","appendChild","click","seletcColor","selectedColor","onDrop","selectedFiles","map","file","reader","FileReader","e","uploadImages","String","target","result","readAsDataURL"],"mappings":"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","sourcesContent":["import { SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS } from \"constants\";\nimport { createContext, useEffect, useRef, useState } from \"react\";\nimport { ContextData, ContextProviderProps } from './interfaces'\n\nexport const Context = createContext({} as ContextData);\n\nexport const ContextProvider = ({ children }: ContextProviderProps) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const [upperText, setUpperText] = useState(\"\");\n    const [lowerText, setLowerText] = useState(\"\");\n    const [images, setImages] = useState<string[]>([]);\n    const [color, setColor] = useState('white');\n    const [font, setFont] = useState('Impact')\n    // Roboto, Zen Dots, Karantina\n\n    useEffect(() => {\n        if (images && images.length > 0) {\n            const image = new Image();\n            image.onload = () => {\n                const canvas = canvasRef.current;\n                canvas.width = 500;\n                canvas.height = 500;\n                const contexto = canvas.getContext('2d');\n                contexto.drawImage(image, 0, 0, 500, 500);\n                contexto.fillText(upperText, 50, 60);\n                contexto.font = `25pt ${font}`;\n                contexto.fillStyle = `${color}`;\n                contexto.strokeStyle = \"black\";\n                contexto.strokeText(upperText, 50, 60);\n                contexto.fillText(upperText, 50, 60);\n                contexto.strokeText(lowerText, 50, 440);\n                contexto.fillText(lowerText, 50, 440);\n                contexto.lineWidth = 2;\n            }\n            image.src = images[0]\n            console.log(image.nodeValue)\n        }\n    }, [images, upperText, lowerText, color, font])\n\n    const seletcFont = (selectedFont: string) => {\n        setFont(selectedFont);\n    }\n\n    const saveMeme = () => {\n        if (images && images.length > 0) {\n            const image = new Image();\n            image.onload = () => {\n                const canvas = canvasRef.current;\n                canvas.width = 500;\n                canvas.height = 500;\n                const contexto = canvas.getContext('2d');\n                contexto.drawImage(image, 0, 0, 500, 500);\n                contexto.fillText(upperText, 50, 60);\n                contexto.font = `25pt ${font}`;\n                contexto.fillStyle = `${color}`;\n                contexto.strokeStyle = \"black\";\n                contexto.strokeText(upperText, 50, 60);\n                contexto.fillText(upperText, 50, 60);\n                contexto.strokeText(lowerText, 50, 440);\n                contexto.fillText(lowerText, 50, 440);\n                contexto.lineWidth = 2;\n            }\n            const a = document.createElement('a');\n            a.href = `${image.src}.png`;\n            a.download = 'meme';\n            document.body.appendChild(a);\n            a.click();\n        }\n\n    }\n\n    const seletcColor = (selectedColor: string) => {\n        setColor(selectedColor);\n    }\n\n    const onDrop = (selectedFiles: File[]) => {\n        if (selectedFiles && selectedFiles.length) {\n            selectedFiles.map((file) => {\n                const reader = new FileReader();\n                reader.onload = (e) => {\n                    const uploadImages = [String(e.target.result), ...images];\n                    setImages(uploadImages);\n                }\n                reader.readAsDataURL(file);\n            })\n        }\n    }\n\n    return (\n        <Context.Provider value={{\n            canvasRef,\n            upperText,\n            lowerText,\n            setUpperText,\n            setLowerText,\n            onDrop,\n            images,\n            seletcFont,\n            seletcColor,\n            saveMeme,\n        }}>\n            {\n                children\n            }\n        </Context.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}