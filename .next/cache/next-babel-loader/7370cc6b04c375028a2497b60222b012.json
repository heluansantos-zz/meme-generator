{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/hcls/Hevolsoft/meme-generator/src/context/Context.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useRef, useState } from \"react\";\nexport var Context = createContext({});\nexport var ContextProvider = function ContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var canvasRef = useRef(null);\n\n  var _useState = useState(\"\"),\n      upperText = _useState[0],\n      setUpperText = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      lowerText = _useState2[0],\n      setLowerText = _useState2[1];\n\n  var _useState3 = useState([]),\n      images = _useState3[0],\n      setImages = _useState3[1];\n\n  var onDrop = function onDrop(selectedFiles) {\n    if (selectedFiles && selectedFiles.length) {\n      selectedFiles.map(function (file) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          var uploadImages = [String(e.target.result)].concat(_toConsumableArray(images));\n          setImages(uploadImages);\n        };\n\n        reader.readAsDataURL(file);\n      });\n    }\n  };\n\n  return __jsx(Context.Provider, {\n    value: {\n      canvasRef: canvasRef,\n      upperText: upperText,\n      lowerText: lowerText,\n      setUpperText: setUpperText,\n      setLowerText: setLowerText,\n      onDrop: onDrop,\n      images: images\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, children);\n};\n\n_s(ContextProvider, \"ZfRALSChnYGc9cjzmWiqqyckbDQ=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/hcls/Hevolsoft/meme-generator/src/context/Context.tsx"],"names":["createContext","useRef","useState","Context","ContextProvider","children","canvasRef","upperText","setUpperText","lowerText","setLowerText","images","setImages","onDrop","selectedFiles","length","map","file","reader","FileReader","onload","e","uploadImages","String","target","result","readAsDataURL"],"mappings":";;;;;;;;AAAA,SAASA,aAAT,EAAwBC,MAAxB,EAAgCC,QAAhC,QAAgD,OAAhD;AAGA,OAAO,IAAMC,OAAO,GAAGH,aAAa,CAAC,EAAD,CAA7B;AAEP,OAAO,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,OAAwC;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;AACnE,MAAMC,SAAS,GAAGL,MAAM,CAAoB,IAApB,CAAxB;;AADmE,kBAEjCC,QAAQ,CAAC,EAAD,CAFyB;AAAA,MAE5DK,SAF4D;AAAA,MAEjDC,YAFiD;;AAAA,mBAGjCN,QAAQ,CAAC,EAAD,CAHyB;AAAA,MAG5DO,SAH4D;AAAA,MAGjDC,YAHiD;;AAAA,mBAIvCR,QAAQ,CAAW,EAAX,CAJ+B;AAAA,MAI5DS,MAJ4D;AAAA,MAIpDC,SAJoD;;AAMnE,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,aAAD,EAA2B;AACtC,QAAIA,aAAa,IAAIA,aAAa,CAACC,MAAnC,EAA2C;AACvCD,MAAAA,aAAa,CAACE,GAAd,CAAkB,UAACC,IAAD,EAAU;AACxB,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,QAAAA,MAAM,CAACE,MAAP,GAAgB,UAACC,CAAD,EAAO;AACnB,cAAMC,YAAY,IAAIC,MAAM,CAACF,CAAC,CAACG,MAAF,CAASC,MAAV,CAAV,4BAAgCd,MAAhC,EAAlB;AACAC,UAAAA,SAAS,CAACU,YAAD,CAAT;AACH,SAHD;;AAIAJ,QAAAA,MAAM,CAACQ,aAAP,CAAqBT,IAArB;AACH,OAPD;AAQH;AACJ,GAXD;;AAaA,SACI,MAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AACrBX,MAAAA,SAAS,EAATA,SADqB;AAErBC,MAAAA,SAAS,EAATA,SAFqB;AAGrBE,MAAAA,SAAS,EAATA,SAHqB;AAIrBD,MAAAA,YAAY,EAAZA,YAJqB;AAKrBE,MAAAA,YAAY,EAAZA,YALqB;AAMrBG,MAAAA,MAAM,EAANA,MANqB;AAOrBF,MAAAA,MAAM,EAANA;AAPqB,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUQN,QAVR,CADJ;AAeH,CAlCM;;GAAMD,e;;KAAAA,e","sourcesContent":["import { createContext, useRef, useState } from \"react\";\nimport { ContextData, ContextProviderProps } from './interfaces'\n\nexport const Context = createContext({} as ContextData);\n\nexport const ContextProvider = ({ children }: ContextProviderProps) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const [upperText, setUpperText] = useState(\"\");\n    const [lowerText, setLowerText] = useState(\"\");\n    const [images, setImages] = useState<string[]>([]);\n\n    const onDrop = (selectedFiles: File[]) => {\n        if (selectedFiles && selectedFiles.length) {\n            selectedFiles.map((file) => {\n                const reader = new FileReader();\n                reader.onload = (e) => {\n                    const uploadImages = [String(e.target.result), ...images];\n                    setImages(uploadImages);\n                }\n                reader.readAsDataURL(file);\n            })\n        }\n    }\n\n    return (\n        <Context.Provider value={{\n            canvasRef,\n            upperText,\n            lowerText,\n            setUpperText,\n            setLowerText,\n            onDrop,\n            images,\n        }}>\n            {\n                children\n            }\n        </Context.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}