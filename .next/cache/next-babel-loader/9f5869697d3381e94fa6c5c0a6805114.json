{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/hcls/Hevolsoft/meme-generator/src/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport Head from 'next/head';\nimport { Container, Title, Description, Input, Label, DivInput, Canvas, DivCanvas, DragActive, DragActiveTitle, ButtonFont, ButtonColorRed, ButtonColorWhite, ButtonColorBlack, ButtonColorDiv, ButtonFontDiv } from '../styles/pages/Home';\nimport { Context } from '../context/Context';\n\nvar Home = function Home() {\n  _s();\n\n  var _useContext = useContext(Context),\n      canvasRef = _useContext.canvasRef,\n      lowerText = _useContext.lowerText,\n      setLowerText = _useContext.setLowerText,\n      setUpperText = _useContext.setUpperText,\n      upperText = _useContext.upperText,\n      onDrop = _useContext.onDrop,\n      images = _useContext.images,\n      setColor = _useContext.setColor,\n      setFont = _useContext.setFont;\n\n  var _useDropzone = useDropzone({\n    onDrop: onDrop,\n    accept: ['image/*']\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps,\n      isDragActive = _useDropzone.isDragActive;\n\n  var _useState = useState({\n    title: 'Meme Generator',\n    description: 'Meme Generator or editing.'\n  }),\n      name = _useState[0];\n\n  return __jsx(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Meme Generator\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  })), __jsx(Title, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, name.title), __jsx(Description, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, name.description), __jsx(\"main\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(DivCanvas, _extends({}, getRootProps(), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), isDragActive ? __jsx(DragActive, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, __jsx(DragActiveTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, \"Solte a imagem para fazer upload\")) : __jsx(Canvas, {\n    ref: canvasRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \" Fa\\xE7a upload da imagem\"), __jsx(\"input\", _extends({}, getInputProps(), {\n    placeholder: \"dsadsa\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }))), __jsx(\"form\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(DivInput, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, __jsx(Label, {\n    htmlFor: \"upperText\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"Title\"), __jsx(Input, {\n    value: upperText,\n    onChange: function onChange(e) {\n      return setUpperText(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  })), __jsx(DivInput, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, __jsx(Label, {\n    htmlFor: \"lowerText\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Description\"), __jsx(Input, {\n    value: lowerText,\n    onChange: function onChange(e) {\n      return setLowerText(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  })), __jsx(DivInput, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, __jsx(Label, {\n    htmlFor: \"upperText\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"Filters\"), __jsx(ButtonFontDiv, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, __jsx(ButtonFont, {\n    onClick: setFont('Roboto'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, \"Roboto\"), __jsx(ButtonFont, {\n    onCLick: setFont('Zen Dots'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, \"Zen Dots\"), __jsx(ButtonFont, {\n    onCLick: setFont('Karantina'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, \"Karantina\")), __jsx(ButtonColorDiv, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, __jsx(ButtonColorRed, {\n    onClick: function onClick() {\n      return setColor('red');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, \"Red\"), __jsx(ButtonColorWhite, {\n    onCLick: function onCLick() {\n      return setColor('white');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, \"White\"), __jsx(ButtonColorBlack, {\n    onCLick: function onCLick() {\n      return setColor('black');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, \"Black\"))))));\n};\n\n_s(Home, \"vJ/SF9dY9qK1T9eVwZsbghaAkUc=\", false, function () {\n  return [useDropzone];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/hcls/Hevolsoft/meme-generator/src/pages/index.tsx"],"names":["React","useContext","useState","useDropzone","Head","Container","Title","Description","Input","Label","DivInput","Canvas","DivCanvas","DragActive","DragActiveTitle","ButtonFont","ButtonColorRed","ButtonColorWhite","ButtonColorBlack","ButtonColorDiv","ButtonFontDiv","Context","Home","canvasRef","lowerText","setLowerText","setUpperText","upperText","onDrop","images","setColor","setFont","accept","getRootProps","getInputProps","isDragActive","title","description","name","e","target","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport Head from 'next/head'\n\nimport {\n  Container,\n  Title,\n  Description,\n  Input,\n  Label,\n  DivInput,\n  Canvas,\n  DivCanvas,\n  DragActive,\n  DragActiveTitle,\n  ButtonFont,\n  ButtonColorRed,\n  ButtonColorWhite,\n  ButtonColorBlack,\n  ButtonColorDiv,\n  ButtonFontDiv\n} from '../styles/pages/Home'\nimport { Context } from '../context/Context'\n\nconst Home: React.FC = () => {\n  const {\n    canvasRef,\n    lowerText,\n    setLowerText,\n    setUpperText,\n    upperText,\n    onDrop,\n    images,\n    setColor,\n    setFont,\n  } = useContext(Context)\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop, accept: ['image/*'] })\n  const [name] = useState({\n    title: 'Meme Generator',\n    description: 'Meme Generator or editing.'\n  })\n\n\n  return (\n    <Container>\n      <Head>\n        <title>Meme Generator</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <Title>{name.title}</Title>\n      <Description>{name.description}</Description>\n\n      <main>\n        <DivCanvas\n          {...getRootProps()}\n        >\n          {isDragActive ? (\n            <DragActive>\n              <DragActiveTitle>\n                Solte a imagem para fazer upload\n              </DragActiveTitle>\n            </DragActive>\n          ) : (\n            <Canvas ref={canvasRef}> Faça upload da imagem</Canvas>\n          )}\n\n          <input {...getInputProps()} placeholder=\"dsadsa\" />\n\n        </DivCanvas>\n\n        <form>\n\n          <DivInput>\n            <Label htmlFor=\"upperText\">Title</Label>\n            <Input\n              value={upperText}\n              onChange={(e) => setUpperText(e.target.value)}\n            />\n          </DivInput>\n          <DivInput>\n            <Label htmlFor=\"lowerText\">Description</Label>\n            <Input\n              value={lowerText}\n              onChange={(e) => setLowerText(e.target.value)}\n            />\n          </DivInput>\n          <DivInput>\n            <Label htmlFor=\"upperText\">Filters</Label>\n            <ButtonFontDiv>\n              <ButtonFont onClick={setFont('Roboto')}>Roboto</ButtonFont>\n              <ButtonFont onCLick={setFont('Zen Dots')}>Zen Dots</ButtonFont>\n              <ButtonFont onCLick={setFont('Karantina')}>Karantina</ButtonFont>\n            </ButtonFontDiv>\n            <ButtonColorDiv>\n              <ButtonColorRed onClick={() => setColor('red')}>Red</ButtonColorRed>\n              <ButtonColorWhite onCLick={() => setColor('white')}>White</ButtonColorWhite>\n              <ButtonColorBlack onCLick={() => setColor('black')}>Black</ButtonColorBlack>\n            </ButtonColorDiv>\n\n          </DivInput>\n        </form>\n      </main>\n\n    </Container>\n  )\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}